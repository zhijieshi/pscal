[cmdletbinding()]
param (
        [Parameter(Mandatory = $false, Position = 0)][int]$month = -3,
        [Parameter(Mandatory = $false, Position = 1)][int]$year = 0,
        [switch]$y,
        [switch]$three
)

# the Center-String function is based on code generated by copilot
function Center-String {
    param (
        [string]$String,
        [int]$TotalWidth
    )

    if ($String.Length -ge $TotalWidth) {
            $String
    } else {
            $Padding = ($TotalWidth - $String.Length) / 2
            $String.PadLeft($String.Length + [math]::Floor($Padding)).PadRight($TotalWidth)
    }
}

function cal_get_month {
    param (
        [int] $year,
        [int] $month,
        [int] $hlday = 0, 
        [switch] $noyear 
    )
        
    $firstDayOfMonth = Get-Date -Year $year -Month $month -Day 1
    $lastDayOfMonth = $firstDayOfMonth.AddMonths(1).AddDays(-1)

    $results = New-Object System.Collections.Generic.List[System.String]

    if ($noyear) {
        $str_month = Center-String $firstDayOfMonth.ToString("MMMM") 20
    } else {
        $str_month = Center-String $firstDayOfMonth.ToString("MMMM yyyy") 20
    }

    $results.Add($str_month)
    $results.Add("Su Mo Tu We Th Fr Sa ")
    $curline = "   " * $firstDayOfMonth.DayOfWeek

    $HLStart = "`e[31;43m"
    $HLReset = "`e[0m"
    $dayOfWeek = $firstDayOfMonth.DayOfWeek 
    for ($day = 1; $day -le $lastDayOfMonth.Day; $day += 1) {
        if ($day -eq $hlday) {
            # use if statement to avoid highlighting the space before the single digit day
	    $space = if ($day -gt 9) { "" } else { " "}
	    $curline += $space + $HLStart + $day.ToString() + "${HLReset} "
        } else {
            $curline += ("{0,2} " -f $day)
        }
	$dayOfWeek = ($dayOfWeek + 1) % 7
        if ($dayOfWeek -eq 0) {
            $results.Add($curline)
            $curline = ""
        }
    }
    if ($curline -ne "") {
        $results.Add($curline)
    }
    if ($results.Count -lt 8) { 
        $results.Add("")
    }
    if ($results.Count -lt 8) { 
        $results.Add("")
    }
    $results
}

function print_3_months 
{
    param (
        [int] $year,
        [int] $month,
        [int] $hlmonth,
        [int] $hlday,
        [switch] $noyear
    )

    $month2 = Get-Date -year $year -month $month -day 1
    $day = if ($hlmonth -eq $month2.Month) {$hlday} else {0}
    $lines2 = cal_get_month $month2.Year $month2.Month $day -noyear:$noyear
    
    $month1 = $month2.AddMonths(-1)
    $day = if ($hlmonth -eq $month1.Month) {$hlday} else {0}
    $lines1 = cal_get_month $month1.Year $month1.Month $day -noyear:$noyear

    $month3 = $month2.AddMonths(1)
    $day = if ($hlmonth -eq $month3.Month) {$hlday} else {0}
    $lines3 = cal_get_month $month3.Year $month3.Month $day -noyear:$noyear

    for ($i = 0; $i -lt $lines1.Count; $i ++) {
            $p1 = $lines1[$i].PadRight(21, ' ')
            $p2 = $lines2[$i].PadRight(21, ' ')
            echo ("{0} {1} {2}" -f $p1, $p2, $lines3[$i])
    }
}

function print_year
{
    param (
        [int] $theyear
    )

    echo (Center-String $theyear.ToString() 65)
    echo "" 

    for ($m = 2; $m -lt 12; $m += 3) {
        print_3_months $theyear $m 0 0 -noyear
    }

    echo "" 
}

function call_get_calendar
{
    param (
        [int] $month,
        [int] $year, 
        [switch] $y,
        [switch] $three
    )
    
    $currentDate = Get-Date
    if ($month -eq 0) { $month = $currentDate.Month } 
    if ($year -eq 0) { $year = $currentDate.Year }

    if ($y) {
        print_year $year
    } else {
        $hlday = 0
        if ($three) {
            if (($year -eq ($currentDate.Year - 1) -and $month -eq 12) -or 
                ($year -eq $currentDate.Year) -or
                ($year -eq ($currentDate.Year + 1) -and $mont -eq 1)) {
                $hlday = $currentDate.Day
            }
            print_3_months $year $month $currentDate.Month $hlday
        } else {
            if ($year -eq $currentDate.Year -and $month -eq $currentDate.Month) {
                $hlday = $currentDate.Day
            }
            $current_lines = cal_get_month $year $month $hlday
            echo ($current_lines -join "`n")
        }
    } 
}

# handling special cases
if ($month -eq -3) {
    # -3 month
    $month = $year 
    $year = 0
    $three = $true
} elseif (($month -gt 0 -or $month -le 12) -and $year -eq -3) {
    # month -3
    $year = 0
    $three = $true
} elseif ($month -gt 12 -and $year -eq 0) {
    # if only one large number is specified, assume it is year
    $y = $true
    $year = $month
    $month = 0
}

if ($month -lt 0 -or $month -gt 12) {
    Write-Error "Error: invalid month: $month."
    return 
}

if ($year -lt 0) {
    Write-Error "Error: invalid year: $year."
    return
}

call_get_calendar $month $year -y:$y -three:$three

<#

.SYNOPSIS
This Powershell script displays calendars. 

.DESCRIPTION

.EXAMPLE

pscal 
pscal -3

The default argument is "-3". The program displays three months
around the current date, which is highlighted.

.EXAMPLE

pscal 3

Display the calendar for a single month, March of the current year. If the
number is between 1 and 12, it is considered as a month.

This is different from the cal command, which prints the calendar for year 3.

.EXAMPLE

pscal 2 2025

Display the calendar for a single month, Feburary 2025.

.EXAMPLE

pscal 2025

Display the calendar for year 2025. 

If the number is great than 1000, it is considered as a year.

.EXAMPLE

pscal -y

Display the calendar for the current year.

.NOTES

  Version:        0.1
  Author:         JS
  Creation Date:  Jan 2025
  Purpose/Change: Support -3 and -y.

.LINK

#>
